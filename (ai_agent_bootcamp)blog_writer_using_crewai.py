# -*- coding: utf-8 -*-
"""(AI Agent Bootcamp)Blog writer using CrewAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qgpg_m4n9Ej2NqBK4dF5xAfkxmJUrcHs

# Create Multi-AI Agent to Research and Write an Article


Learn about Agents, Tasks and organize agents to work sequentially.
"""

# To install crewAI, you need to have Python >=3.10 and <=3.13 installed on your system:
import sys
print(sys.version)

"""### Step 01. Intalling dependencies

Installing crewAi library and crewAI tools
"""

pip install crewai

# Warning control
import warnings
warnings.filterwarnings('ignore')

"""### Step 02. Importing Libraries

Installing crewAi library and crewAI tools
"""

from crewai import Agent, Task, Crew

"""For LLM agents, we will be using OpenAI's gpt-3.5-turbo."""

import os
os.environ["OPENAI_API_KEY"] = ""

"""### Step 03. Creating Agents

Create instance of the Agent class with the desired properties, `role`, `goal` and `backstory`

- `role`: agent's function within the crew
- `goal`: agent's objective. Guides agent's decision making process
- `backstory`: provides context to agent's role and goal. Helps in interation and collaboration.

### Agent: Planner

**Note**: The benefit of using _multiple strings_ :
```Python
varname = "line 1 of text"
          "line 2 of text"
```

versus the _triple quote docstring_:
```Python
varname = '''line 1 of text
             line 2 of text
          '''
```
is that it can avoid adding those whitespaces and newline characters, making it better formatted to be passed to the LLM.
"""

planner = Agent(
    role="Content Planner",
    goal="Plan engaging and factually accurate content on {topic}",
    backstory="You're working on planning a blog article "
              "about the topic: {topic}."
              "You collect information that helps the "
              "audience learn something "
              "and make informed decisions. "
              "Your work is the basis for "
              "the Content Writer to write an article on this topic",
    allow_delegation=False,
    verbose=True
)

"""### Agent: Writer"""

writer = Agent(
    role="Content Writer",
    goal="Write insightful and factually accurate "
         "opinion piece about the topic: {topic}",
    backstory="You're working on a writing "
              "a new opinion piece about the topic: {topic}. "
              "You base your writing on the work of "
              "the Content Planner, who provides an outline "
              "and relevant context about the topic. "
              "You follow the main objectives and "
              "direction of the outline, "
              "as provide by the Content Planner. "
              "You also provide objective and impartial insights "
              "and back them up with information "
              "provide by the Content Planner. "
              "You acknowledge in your opinion piece "
              "when your statements are opinions "
              "as opposed to objective statements.",
    allow_delegation=False,
    verbose=True
)

"""### Agent: Editor"""

editor = Agent(
    role="Editor",
    goal="Edit a given blog post to align with "
         "the writing style of the organization. ",
    backstory="You are an editor who receives a blog post "
              "from the Content Writer. "
              "Your goal is to review the blog post "
              "to ensure that it follows journalistic best practices,"
              "provides balanced viewpoints "
              "when providing opinions or assertions, "
              "and also avoids major controversial topics "
              "or opinions when possible.",
    allow_delegation=False,
    verbose=True
)

"""### Step 04. Define the Tasks

Tasks are **specific assignments**, completed by agents.
They **provide all necessary details for execution**, such as a `description`, `expected_output` , `agent` responsible, tools, etc.

- `description`: Tells about what task entails
- `expected_output`: Tells about what task output should look like
- `agent`: Agent responsible for the task

### Task: Plan
"""

plan = Task(
    description=(
        "1. Prioritize the latest trends, key players, "
            "and noteworthy news on {topic}.\n"
        "2. Identify the target audience, considering "
            "their interests and pain points.\n"
        "3. Develop a detailed content outline including "
            "an introduction, key points, and a call to action.\n"
        "4. Include SEO keywords and relevant data or sources."
    ),
    expected_output="A comprehensive content plan document "
        "with an outline, audience analysis, "
        "SEO keywords, and resources.",
    agent=planner,
)

"""### Task: Write"""

write = Task(
    description=(
        "1. Use the content plan to craft a compelling "
            "blog post on {topic}.\n"
        "2. Incorporate SEO keywords naturally.\n"
        "3. Sections/Subtitles are properly named "
            "in an engaging manner.\n"
        "4. Ensure the post is structured with an "
            "engaging introduction, insightful body, "
            "and a summarizing conclusion.\n"
        "5. Proofread for grammatical errors and "
            "alignment with the brand's voice.\n"
    ),
    expected_output="A well-written blog post "
        "in markdown format, ready for publication, "
        "each section should have 2 or 3 paragraphs.",
    agent=writer
)

"""### Task: Edit"""

edit = Task(
    description=("Proofread the given blog post for "
                 "grammatical errors and "
                 "alignment with the brand's voice."),
    expected_output="A well-written blog post in markdown format, "
                    "ready for publication, "
                    "each section should have 2 or 3 paragraphs.",
    agent=editor
)

"""### Step 05. Forming the crew

Crew is **group of AI agents**, collaborating to perform set of tasks.


- `tasks`: list of tasks
- `agents`: list of agents
- `process (optional)`: work flow (e.g., sequential, hierarchical) default : sequential
- `verbose=2` allows you to see all the logs of the execution.


    - **Note**: *For this simple example*, the tasks will be performed sequentially (i.e they are dependent on each other), so the _order_ of the task in the list _matters_.


"""

crew = Crew(
    tasks=[plan, write, edit],
    agents=[planner, writer, editor],
    verbose=False
)

"""### Step 06.  Kick It Off

Pass in a topic of your choice and see what the agents come up with!
"""

topic = "Artificial Intelligence"
result = crew.kickoff(inputs={"topic": topic})

from IPython.display import Markdown

# Extract markdown content from between the code blocks
markdown_content = result.raw.split('```markdown\n')[1].split('\n```')[0]
Markdown(markdown_content)

!pip freeze > requirements.txt

